<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>唐嗣成</title>
    <description>欢迎来到我的个人站~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 11 Mar 2018 21:59:04 +0800</pubDate>
    <lastBuildDate>Sun, 11 Mar 2018 21:59:04 +0800</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>细说oc中的load和initialize方法</title>
        <description>&lt;h2 id=&quot;细说oc中的load和initialize方法参考博文&quot;&gt;细说oc中的load和initialize方法&lt;a href=&quot;http://blog.csdn.net/lqq200912408/article/details/50779249&quot;&gt;参考博文&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;oc中有两个特殊的类方法。这里细说一下两个方法的区别和联系。&lt;/p&gt;

&lt;h3 id=&quot;load&quot;&gt;load&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;load方法在这个文件被装载的时候调用，只要在你的build Phases-&amp;gt;Complie Sources 中出现的文件总会被装载，这与这个类是否呗用到无关，因此load方法总是在main函数之前调用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果这个类实现了load方法，在调用前会首先调用父类的load方法，这个过程是自动完成，并不需要我们手动实现：&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;ps: 如果一个类没有实现load方法，那么就不会调用他的父类load方法，这一点与正常的类继承和方法调用不一样，需要额外注意一下。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;load方法调用时，系统处于脆弱状态，如果调用别的类方法，且该方法依赖于这个类的load方法，进行初始化设置，那么必须确保这个类的load方法已经调用了，&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在compile source 中，文件的排放顺序就是其转载的顺序，自然也就是load方法的调用顺序，这一点证明了load方法中会自动调用父类的方法。&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;ps: 永远不要依赖这个顺序来实现你的代码逻辑，一方面：这个在后期的开发中极其容易导致错误，另一方面：你实际上并不需要这么做。所以！一般来说，除了Method Swizzle ，其他的逻辑不应该放在load方法中实现。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;initialize&quot;&gt;initialize&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;这个方法在第一次给某个类发送消息时调用（比如实例化一个对象），并且只会调用一次。initialize方法实际上时一种惰性调用，也就是说如果一个类没有呗用到，那么它的initialize方法也不会被调用，这一点可以有效利用资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;与load方法类似的是，在initialize方法内部也会调用父类的方法，而且不需要我们显示的写出来。与load方法不同之处在于，即使子类没有实现initialize方法，也会调用父类的方法，这会导致一个很严重的问题：&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在创建子类对象时，首先要创建父类对象，所以会调用一次父类的initialize方法，然后创建子类时，尽管自己没有实现initialize方法，但还是会调用到父类的方法。正确使用initialize方法的姿势如下：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+ (void)initialize {  
    if (self == [Parent class]) {  
        NSLog(@&quot;Initialize Parent, caller Class %@&quot;, [self class]);  
    }  
} 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;load和initialize方法都会在实例化对象之前调用，以main函数为分水岭，前者在main函数之前调用，后者在之后调用。这两个方法会被自动调用，不能手动调用它们。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;load和initialize方法都不用显示的调用父类的方法而是自动调用，即使子类没有initialize方法也会调用父类的方法，而load方法则不会调用父类。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;load方法通常用来进行Method Swizzle，initialize方法一般用于初始化全局变量或静态变量。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;load和initialize方法内部使用了锁，因此它们是线程安全的。实现时要尽可能保持简单，避免阻塞线程，不要再使用锁。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/%E7%BB%86%E8%AF%B4oc%E4%B8%AD%E7%9A%84load%E5%92%8Cinitialize%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/%E7%BB%86%E8%AF%B4oc%E4%B8%AD%E7%9A%84load%E5%92%8Cinitialize%E6%96%B9%E6%B3%95/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>细说iOS中的暴力方法替换，Method Swizzle</title>
        <description>&lt;h2 id=&quot;细说ios中的暴力方法替换method-swizzle参考博文&quot;&gt;细说iOS中的暴力方法替换，Method Swizzle&lt;a href=&quot;http://www.cocoachina.com/ios/20160121/15076.html&quot;&gt;参考博文&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;今天突然遇到了一个问题，在开发的过程中，如果遇到有些实现逻辑并不是我想要的怎么办？这个时候第一想到的有以下几种做法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;手动添加&lt;/p&gt;

    &lt;p&gt;直接简单粗暴的在每个控制器中加入统计，复制、粘贴、复制、粘贴…
  上面这种方法太Low了，消耗时间而且以后非常难以维护，会让后面的开发人员骂死的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;继承&lt;/p&gt;

    &lt;p&gt;我们可以使用OOP的特性之一，继承的方式来解决这个问题。创建一个基类，在这个基类中添加统计方法，其他类都继承自这个基类。&lt;/p&gt;

    &lt;p&gt;然而，这种方式修改还是很大，而且定制性很差。以后有新人加入之后，都要嘱咐其继承自这个基类，所以这种方式并不可取。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Category&lt;/p&gt;

    &lt;p&gt;我们可以为UIViewController建一个Category，然后在所有控制器中引入这个Category。当然我们也可以添加一个PCH文件，然后将这个Category添加到PCH文件中。&lt;/p&gt;

    &lt;p&gt;我们创建一个Category来覆盖系统方法，系统会优先调用Category中的代码，然后在调用原类中的代码。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;method-swizzling&quot;&gt;Method Swizzling&lt;/h3&gt;
&lt;p&gt;但是上面这些方法都有点麻烦，这个时候就有了runtime中的黑魔法Method Swizzling，Method Swizzling本质上就是对IMP和SEL进行交换。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;核心
在实现 Method Swizzling 时，核心代码主要就是runtime的c语言api：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  OBJC_EXPORT void method_exchangeImplementations(Method m1, Method m2) 
   __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_2_0);
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实现思路
  我们先给UIViewController添加一个Category，然后在Category中的+(void)load方法中添加Method Swizzling方法，我们用来替换的方法也写在这个Category中。由于load类方法是程序运行时这个类被加载到内存中就调用的一个方法，执行比较早，并且不需要我们手动调用。而且这个方法具有唯一性，也就是只会被调用一次，不用担心资源抢夺的问题。&lt;/p&gt;

    &lt;p&gt;定义Method Swizzling中我们自定义的方法时，需要注意尽量加前缀，以防止和其他地方命名冲突，Method Swizzling的替换方法命名一定要是唯一的，至少在被替换的类中必须是唯一的。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/%E7%BB%86%E8%AF%B4iOS%E4%B8%AD%E7%9A%84%E6%9A%B4%E5%8A%9B%E6%9B%BF%E6%8D%A2Method-Swizzle/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/%E7%BB%86%E8%AF%B4iOS%E4%B8%AD%E7%9A%84%E6%9A%B4%E5%8A%9B%E6%9B%BF%E6%8D%A2Method-Swizzle/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>手把手Vue2.0 全家桶 + elements-ui 初始化流程</title>
        <description>&lt;h2 id=&quot;手把手vue20-全家桶--elements-ui-初始化流程&quot;&gt;手把手Vue2.0 全家桶 + elements-ui 初始化流程&lt;/h2&gt;

&lt;h3 id=&quot;一前言&quot;&gt;一.前言&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;本文档默认你的所有环境已经ok，这里整理的是如何完整的搭建一个vue2.0全家桶和elements-ui 的搭建流程步骤。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二vue脚手架的初始化&quot;&gt;二.vue脚手架的初始化&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先，我们先使用vue-cli 来简单的构建一个vue项目&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      npm install -g vue-cle //全局安装vue-cli
      npm init webpack &amp;lt;yourProjectName&amp;gt; // 生成一个webpack的脚手架项目
      cd &amp;lt;yourProjectName&amp;gt;
      npm install //依赖的初始化
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;执行完上面的操作，你就已经初步得到了一个vue的脚手架工程。&lt;/li&gt;
  &lt;li&gt;其中，新版本的脚手架会询问你是否需要用vue-route，你选是，全家桶中的route文件也就在里面了。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三-脚手架命令的介绍&quot;&gt;三. 脚手架命令的介绍&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;c&quot;&gt;# 在开发的过程中，我们执行以下命令，可以让我们直接在开发的过程中热部署到浏览器上查看效果。&lt;/span&gt;
npm run dev

&lt;span class=&quot;c&quot;&gt;# 如果需要打包出常规的html+css代码，就需要执行下列操作。&lt;/span&gt;
npm run build

&lt;span class=&quot;c&quot;&gt;# build for production and view the bundle analyzer report&lt;/span&gt;
npm run build --report

&lt;span class=&quot;c&quot;&gt;# run unit tests&lt;/span&gt;
npm run unit

&lt;span class=&quot;c&quot;&gt;# run e2e tests&lt;/span&gt;
npm run e2e

&lt;span class=&quot;c&quot;&gt;# run all tests&lt;/span&gt;
npm &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;四-脚手架的目录结构&quot;&gt;四. 脚手架的目录结构。&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vue-element-admin:             项目名称
|   .babelrc                   babel的配置文件
|   .editorconfig              编辑器的配置文件
|   .gitignore                 git的忽略文件
|   .postcssrc.js              编译css的工具
|   index.html                 网站主页
|   package.json               项目依赖哪些包的文件
|   README.md                  说明文档
|
+---build                      构建的配置文件夹
|       build.js               项目构建配置入口
|       check-versions.js      版本控制
|       dev-client.js
|       dev-server.js
|       utils.js			        工具类
|       vue-loader.conf.js		 vue编译插件
|       webpack.base.conf.js   webpack基础文件
|       webpack.dev.conf.js	 开发环境webpack执行的特殊文件
|       webpack.prod.conf.js   生产环境webpack执行的特殊文件
|       webpack.test.conf.js
|
+---config                      整体的配置文件夹
|       dev.env.js
|       index.js                配置文件入口
|       prod.env.js
|       test.env.js
|
+---src                         源文件夹
|   |   App.vue                 布局组件
|   |   main.js                 入口文件
|   |
|   +---assets                  静态文件夹
|   |       logo.png
|   |
|   +---components              组件文件夹
|   |       Hello.vue           单个组件
|   |
|   \---router                  路由文件夹
|           index.js            路由主页
|
+---static                      静态文件夹
|       .gitkeep                空文件（Git本身不允许全空目录提交至版本库，一个办法是在目录下创建一个文件，取名为.gitkeep是习惯用法）
|
\---test                        测试文件夹

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;五集成element-ui-可参考官网&quot;&gt;五.集成element-ui 可参考&lt;a href=&quot;http://element-cn.eleme.io/#/zh-CN/component/quickstart&quot;&gt;官网&lt;/a&gt;。&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加依赖&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm install element-ui -S
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;引入,在main.js中添加&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import ElementUI from &lt;span class=&quot;s1&quot;&gt;'element-ui'&lt;/span&gt;
  import &lt;span class=&quot;s1&quot;&gt;'element-ui/lib/theme-chalk/index.css'&lt;/span&gt;
  Vue.use&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ElementUI&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;六添加sass配置&quot;&gt;六.添加sass配置&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加依赖&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm install node-sass --save-dev
  npm install sass-loader --save-dev

  //--save-dev 会将该依赖写入package.json，方便别人安装依赖
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;打开webpack.base.config.js 在loaders里面添加&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;test:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/\.scss$/,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;loaders:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;style&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;css&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sass&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;七-添加vuex&quot;&gt;七. 添加Vuex&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加依赖&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm install vuex --save
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;创建vuex相关文件夹及文件&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;在src文件夹下新建store文件夹后，在store文件夹下新建如下文件:
index.js、mutations.js、actions.js、getters.js及rootState.js&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;修改src下的入口文件main.js&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  import store from &lt;span class=&quot;s1&quot;&gt;'./store/index'&lt;/span&gt;; //引入store
  ...

  /&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; eslint-disable no-new &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/
  new Vue&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;
    ...
    store, //挂载store
    ...
  &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;最后，根据&lt;a href=&quot;https://vuex.vuejs.org/zh-cn/getting-started.html&quot;&gt;vuex官网&lt;/a&gt;自行填充新增文件内容。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;八集成axios&quot;&gt;八.集成axios&lt;/h3&gt;

&lt;p&gt;vue官方人员说，2.0后将不再继续维护vue-resource了，并推荐大家使用 axios 。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加依赖&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm install axios --save
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在src下新建一个axios.js文件，可以根据&lt;a href=&quot;https://www.npmjs.com/package/axios&quot;&gt;官网&lt;/a&gt;填充内容。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在main.js中引入axios.js 并且将其绑到vue的原型链上。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  import axios from './axios'
  Vue.prototype.$ajax = axios
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;实际应用&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;在axios.js中添加&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  export default {
     /**
      * 用户登录
      */
     Login (params) {
       return fetch('/post', params)
     },
   	...
    }
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;2.&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  methods: {
     login () {
        let params = {
            cid: md5(String(new Date().getTime() + Math.random())),
            email: this.email,
            password: this.password
        }
        this.$ajax.login(params)
            .then((res) =&amp;gt; {
                // 成功回调
            }, (res) =&amp;gt; {
                // 失败回调
            })
       },
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;axios 交互的一些问题可以&lt;a href=&quot;https://www.cnblogs.com/lijuntao/p/7423790.html&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;九配置mock&quot;&gt;九.配置mock&lt;/h3&gt;
&lt;p&gt;我对比了市面上几个不同的mock，包括jsonserver,感觉各有优劣吧，但是从开发的角度来说，mock的作用主要还是作为模拟数据返回、数据校验等一系列的操作，并且不应该占用开发人员太多的时间，所以在这里，我还是选择了简单的mockjs使用方法。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;一.我们可以先新建一个叫mock的文件夹，在这里可以放我们所有和mock相关的文件。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;二.引入依赖&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm install mockjs --save -dev
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;三. 新建一个mock.js文件，代码如下&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  const Mock = require('mockjs');
	
  const devPath = 'http://localhost:3001';
  // 获取 mock.Random 对象
	
  const Random = Mock.Random;
	
	
  const login = (options)=&amp;gt;{
    &quot;use strict&quot;;
    let body = JSON.parse(options.body);
    console.log(body);
    return require('./mock.json')
    // return {'status':404,statusText:'error'}
  }
	
  Mock.mock(devPath+'/login', 'get', login);//这样就可以拦截掉你发送的http://localhost:3001/login 的get请求，并且会去执行第三个参数的方法。
	
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;四，去你之前新建的axios.js最上面中加上这么一段话&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  process.env.NODE_ENV === 'development'&amp;amp;&amp;amp; require('mock/mock.js')
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;这样你就可以在开发环境中引入mock环境，同时不用担心是否会影响到生产环境了，而且，如果当你不需要在开发环境中引入mock了，那么你只需要注释掉这句话，就可以了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/vue2.0%E5%85%A8%E5%AE%B6%E6%A1%B6+elements%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/vue2.0%E5%85%A8%E5%AE%B6%E6%A1%B6+elements%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/</guid>
        
        <category>vue element-ui</category>
        
        
      </item>
    
      <item>
        <title>node+express 完整服务器搭建</title>
        <description>&lt;h2 id=&quot;nodeexpress-完整服务器搭建&quot;&gt;node+express 完整服务器搭建&lt;/h2&gt;

&lt;h3 id=&quot;一初始化nodeexpress服务器&quot;&gt;一.初始化node+express服务器&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先初始化express项目&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;全局安装两个模块&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; npm install express -g
 npm install express-generator -g
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;生成express 基本框架&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; express yourProjectName
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;添加依赖&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; cd yourProjectName
 npm install
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;启动服务器&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; npm start
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个时候你已经基本运行初始化完了一个node+express的项目，你只要执行npm start 就可以在浏览器初步访问&lt;a href=&quot;http://localhost:3000/&quot;&gt;http://localhost:3000/&lt;/a&gt; 了。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;同时，你可以看到一个目录为：&lt;/p&gt;
    &lt;blockquote&gt;
      &lt;p&gt;bin&lt;/p&gt;
      &lt;blockquote&gt;
        &lt;p&gt;www // 项目入口文件
node_moduls //项目所需模块&lt;/p&gt;
      &lt;/blockquote&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;public // 静态资源，比如图片，js,css之类&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;routes //路由文件夹&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;views //页面文件，根据你选择渲染引擎来选择放什么后缀的文件，默认是jada文件&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;app.js //项目中需要的中间件等基本配置&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;package.json //定义项目的基本配置信息等，包括项目所需的依赖和版本号。&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二重新选择页面渲染引擎让项目可以直接家在html页面&quot;&gt;二.重新选择页面渲染引擎，让项目可以直接家在html页面&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;在项目根目录执行&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm install ejs --save
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;这个时候你就可以在package.json中看到你新增的ejs，（你也可以将jada的删掉）。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;下面我们就去app.js中修改配置。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var ejs = require('ejs');
  app.set('views', path.join(__dirname, 'views'));
  app.engine('html', ejs.__express);
  app.set('view engine', 'html');//注意要把之前jada删掉
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;三设置静态资源的目录和读取方式引入serve-static&quot;&gt;三.设置静态资源的目录和读取方式，引入‘serve-static’&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;添加依赖&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm install serve-static --save
	
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在app.js中添加引用&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; const serveStatic = require('serve-static');
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;替换&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  app.use(express.static(path.join(__dirname, 'public')));
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;为&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  app.use(serveStatic(path.resolve(__dirname, './views')));
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这样，静态资源在文件中的引用就可以使用相对路径而不是必须是绝对路径，你就可以把你的静态资源放在views里面了，而且页面上可以用相对路径引用静态资源。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;serve-static 还有很多很有用的地方，这里我就不赘述了，详情可以参考&lt;a href=&quot;https://www.npmjs.com/package/serve-static&quot;&gt;serve-static&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;四配置log4js参考博文&quot;&gt;四，配置log4js,(&lt;a href=&quot;http://blog.csdn.net/q36835109/article/details/52458769?utm_source=itdadao&amp;amp;utm_medium=referral&quot;&gt;参考博文&lt;/a&gt;)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;新建一个log4js的文件&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  /**
   * Created by tangsicheng on 2018/2/10.
   */
  var log4js = require('log4js');
	
  log4js.configure({
      &quot;appenders&quot;: {
          &quot;access&quot;: {
              &quot;type&quot;: &quot;dateFile&quot;,
              &quot;filename&quot;: &quot;log/access.log&quot;,
              &quot;pattern&quot;: &quot;-yyyy-MM-dd&quot;,
              &quot;category&quot;: &quot;http&quot;
          },
          &quot;app&quot;: {
              &quot;type&quot;: &quot;file&quot;,
              &quot;filename&quot;: &quot;log/app.log&quot;,
              &quot;maxLogSize&quot;: 10485760,
              &quot;pattern&quot;: &quot;-yyyy-MM-dd&quot;,
              &quot;numBackups&quot;: 3
          },
          &quot;errorFile&quot;: {
              &quot;type&quot;: &quot;file&quot;,
              &quot;pattern&quot;: &quot;-yyyy-MM-dd&quot;,
              &quot;filename&quot;: &quot;log/errors.log&quot;
          },
          &quot;errors&quot;: {
              &quot;type&quot;: &quot;logLevelFilter&quot;,
              &quot;level&quot;: &quot;ERROR&quot;,
              &quot;appender&quot;: &quot;errorFile&quot;
          },
          &quot;stdout&quot;: {//控制台输出
              &quot;type&quot;: 'stdout'
          },
      },
      &quot;categories&quot;: {
          &quot;default&quot;: { &quot;appenders&quot;: [ &quot;app&quot;, &quot;errors&quot;, &quot;stdout&quot; ], &quot;level&quot;: &quot;INFO&quot; },
          &quot;http&quot;: { &quot;appenders&quot;: [ &quot;access&quot;], &quot;level&quot;: &quot;INFO&quot; }
      }
  });
  // log4js.configure(require('./log4js.json'));
	
  var logger = log4js.getLogger('logger');
	
  exports.logger = logger;
	
  exports.use = function(app){
      app.use(log4js.connectLogger(logger, {level:'auto', format:':method :url response-time=:response-time ms'}));
  }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编辑app.js&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  var logger = require('morgan');
  var log4js = require('./config/log4js')
  var app = express();
  log4js.use(app);
  app.use(logger('dev'));
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;p&gt;一定要注意顺序!&lt;/p&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/node+express%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E5%BB%BA/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/node+express%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%88%9B%E5%BB%BA/</guid>
        
        <category>nodejs</category>
        
        
      </item>
    
      <item>
        <title>mongodb 在linux 上安装部署</title>
        <description>&lt;h1 id=&quot;mongodb-在linux-上安装部署&quot;&gt;mongodb 在linux 上安装部署&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先，你需要到mongoDB&lt;a href=&quot;https://www.mongodb.com/download-center#community&quot;&gt;官网&lt;/a&gt;(选择Community Server)，根据你linux版本，下载mongodb安装包。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将你本地的下载包放到指定linux服务器上,在你本地mac执行：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  scp /Users/tangsicheng/Downloads/mongodb-linux-x86_64-rhel70-3.6.3.tgz  &amp;lt;userName&amp;gt;@10.1.3.1:/home/&amp;lt;userName&amp;gt;/Downloads
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;解压mongodb，并且移动到local目录内&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  tar -zxvf mongodb-linux-x86_64-rhel70-3.6.3.tgz
  sudo mv mongodb-linux-x86_64-rhel70-3.6.3 /usr/local/mongodb
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MongoDB 的可执行文件位于 bin 目录下，所以可以将其添加到 PATH 路径中：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  export PATH=/usr/local/mongodb/bin:$PATH   
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这个时候，需要创建一个数据库目录，因为这个目录是mongodb指定的数据存储路径，但是它自己却不会自动给我们创建，需要由我们自己创建。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo mkdir -p /data/db
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;将该文件的读写权限给当前用户&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo chown -R &amp;lt;user&amp;gt; /data/db/
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;建立软链接&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongod 
  sudo ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo
  sudo ln -s /usr/local/mongodb/bin/mongostat /usr/local/bin/mongostat
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;配置启动文件&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;先在/etc 目录下新建一个文件叫mongodb.conf&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo vim /etc/mongod.conf
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;在mongod.conf文件内添加&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; bind_ip = &amp;lt;你当前服务器的ip地址&amp;gt;
 port = 27017
 dbpath=/data/db/
 logpath=/data/log/mongodb.log
 logappend=true
 fork=true
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
        &lt;p&gt;&amp;lt;font color=red&amp;gt;&lt;em&gt;注意！-fork才能确保你的mongodb可以后台运行，不然当你关闭当前界面的时候就会关闭mongodb&lt;/em&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;

        &lt;p&gt;#### &lt;配置详解&gt;&lt;/配置详解&gt;&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;     #verbose：日志信息冗余。默认false。提高内部报告标准输出或记录到logpath配置的日志文件中。要启用verbose或启用verbosity 用vvvv参数
     verbose = true
     #启动verbose冗长信息，它的级别有 vv~vvvvv，v越多级别越高，在日志文件中记录的信息越详细。
     vvvv = true
			
     #port：端口。默认27017，MongoDB的默认服务TCP端口，监听客户端连接。要是端口设置小于1024，比如1021，则需要root权限启动，不能用mongodb帐号启动
     port = 27017
			
     #bind_ip：绑定地址。默认127.0.0.1，只能通过本地连接。进程绑定和监听来自这个地址上的应用连接。要是需要给其他服务器连接，则需要注释掉这个或则把IP改成本机地址，可以用一个逗号分隔的列表绑定多个IP地址。
     bind_ip = 127.0.0.1
			
     #maxConns：最大连接数。默认值：取决于系统（即的ulimit和文件描述符）限制。MongoDB中不会限制其自身的连接。当设置大于系统的限制，则无效，以系统限制为准。这对于客户端创建很多“表”，允许连接超时而不关闭“表”的时候很有用。设置该值的高于连接池和总连接数的大小，以防止尖峰时候的连接。注意：不能设置该值大于20000。
     maxConns = 1000
			
     #objcheck:强制验证客户端请求。2.4的默认设置为objcheck成为true，在早期版本objcheck默认为false。因为它强制验证客户端请求，确保客户端绝不插入无效文件到数据库中。对于嵌套文档的对象，会有一点性能影响。设置noobjcheck 关闭。
     objcheck = true
     #noobjcheck = false
			
     #logpath：指定日志文件，该文件将保存所有的日志记录、诊断信息。除非另有指定，mongod将所有的日志信息输出到标准输出。如果没有指定logappend，重启则日志会进行覆盖操作。
     logpath= /home/mongo/mongodb-2.6.8/logs/mongodb.log
     #logappend：写日志的模式：设置为true为追加。默认是覆盖。如果未指定此设置，启动时MongoDB的将覆盖现有的日志文件。
     logappend=true
			
     #syslog：日志输出都发送到主机的syslog系统，而不是标准输出到logpath指定日志文件。syslog和logpath不能一起用，会报错：
     syslog  = true
			
     #pidfilepath：进程ID，没有指定则启动时候就没有PID文件。默认缺省。
     pidfilepath = /home/mongo/mongodb-2.6.8/data/mongo.pid
			
     #keyFile：指定存储身份验证信息的密钥文件的路径。默认缺省。
     keyFile = /home/mongo/mongodb-2.6.8/data/keyfile
			
     #nounixsocket：套接字文件，默认为false，有生成socket文件。当设置为true时，不会生成socket文件。
     nounixsocket = false
			
     #unixSocketPrefix：套接字文件路径，默认/tmp
     unixSocketPrefix = /home/mongo/mongodb-2.6.8/tmp
			
     #fork：是否后台运行，设置为true 启动 进程在后台运行的守护进程模式。默认false。
     fork = true
			
     #auth：用户认证，默认false。不需要认证。当设置为true时候，进入数据库需要auth验证，当数据库里没有用户，则不需要验证也可以操作。直到创建了第一个用户，之后操作都需要验证。比如：通过db.addUser('sa','sa')在admin库下面创建一个超级用户，只能在在admin库下面先认证完毕了：ab.auth('sa','sa')，才能去别的库操作，不能在其他库验证。这样连接数据库也需要指定库：
     #mongo -usa -psa admin     #sa 帐号连接admin
     #mongo -uaa -paa test      #aa 帐号连接test
     auth = true
			
     #noauth：禁止用户认证，默认true
     noauth = true
			
     #cpu：设置为true会强制mongodb每4s报告cpu利用率和io等待，把日志信息写到标准输出或日志文件。默认为false。
     cpu = true
			
     #dbpath：数据存放目录。默认：/data/db/
     dbpath= /home/mongo/mongodb-2.6.8/data/

     #diaglog：创建一个非常详细的故障排除和各种错误的诊断日志记录。默认0。设置为1，为在dbpath目录里生成一个diaglog.开头的日志文件，设置不等于0，日志会每分钟flush一次。产生的日志可以用mongosniff来查看，当重新设置成0，会停止写入文件，但mongod还是继续保持打开该文件，即使它不再写入数据文件。如果你想重命名，移动或删除诊断日志，你必须完全关闭mongod实例。
     0    off. No logging.       #关闭。没有记录。
     #1    Log write operations.  #写操作
     #2    Log read operations.   #读操作
     #3    Log both read and write operations. #读写操作
     #7    Log write and some read operations. #写和一些读操作
			
     #directoryperdb：设置为true，修改数据目录存储模式，每个数据库的文件存储在DBPATH指定目录的不同的文件夹中。使用此选项，可以配置的MongoDB将数据存储在不同的磁盘设备上，以提高写入吞吐量或磁盘容量。默认为false。要是在运行一段时间的数据库中，开启该参数，会导致原始的数据都会消失（注释参数则会回来）。因为数据目录都不同了，除非迁移现有的数据文件到directoryperdb产生的数据库目录中，所以需要在规划好之后确定是否要开启。
     directoryperdb = ture
			
     #journal：日志，（redo log，更多的介绍请看这里和这里）。默认值：（在64位系统）true。默认值：（32位系统）false。
     #设置为true，启用操作日志，以确保写入持久性和数据的一致性，会在dbpath目录下创建journal目录。
     #设置为false，以防止日志持久性的情况下，并不需要开销。为了减少磁盘上使用的日志的影响，您可以启用nojournal，并设置为true。
     #注意：在64位系统上禁用日志必须使用带有nojournal的。
     journal = false
			
     #nojournal:禁止日志，默认值：（在64位系统）false。默认值：（32位系统）true。
     #设置nojournal为true关闭日志，64位，2.0版本后的mongodb默认是启用 journal日志。
     nojournal = true
			
     #journalCommitInterval：刷写提交机制，默认是30ms或则100ms。较低的值，会更消耗磁盘的性能。此选项接受2和300毫秒之间的值：
     #如果单块设备提供日志和数据文件，默认的日记提交时间间隔为100毫秒。
     #如果不同的块设备提供的日志和数据文件，默认的日记提交的时间间隔为30毫秒。
     journalCommitInterval = 100
	
 #ipv6：是否支持ipv6，默认false。
 ipv6 = true
		
 #jsonp：是否允许JSONP访问通过一个HTTP接口，默认false。
 jsonp = true
		
 #nohttpinterface：是否禁止http接口，即28017 端口开启的服务。默认false，支持。
 nohttpinterface = false
		
 #noprealloc：预分配方式。默认false：使用预分配方式来保证写入性能的稳定，预分配在后台进行，并且每个预分配的文件都用0进行填充。这会让MongoDB始终保持额外的空间和空余的数据文件，从而避免了数据增长过快而带来的分配磁盘空间引起的阻塞。设置noprealloc= true来禁用预分配的数据文件，会缩短启动时间，但在正常操作过程中，可能会导致性能显著下降。
 noprealloc = false
		
 #noscripting：是否禁止脚本引擎。默认是false：不禁止。ture：禁止,要是设置成true：运行一些脚本的时候会出现：&quot;server-side JavaScript execution is disabled&quot; 
 noscripting = true 
		
 #notablescan：是否禁止表扫描操作。默认false：不禁止，ture：禁止,禁止要是执行表扫描会出现：&quot;table scans not allowed&quot;
 notablescan = true
		
 #nssize:命名空间的文件（即NS）的默认大小，默认16M，最大2G。所有新创建的默认大小命名空间的文件（即NS）。此选项不会影响现有的命名空间的文件的大小。默认值是16M字节，最大大小为2 GB。让小数据库不让浪费太多的磁盘空间，同时让大数据在磁盘上有连续的空间。
 nssize  = 16
		
 #profile：数据库分析等级设置。记录一些操作性能到标准输出或则指定的logpath的日志文件中，默认0:关闭。
 #0 关。无分析。
 #1 开。仅包括慢操作。
 #2 开。包括所有操作。
 #控制 Profiling  的开关和级别：2种,第一种是直接在启动参数里直接进行设置或则启动MongoDB时加上–profile=级别，其信息保存在 生成的system.profile 中。第二种是在客户端用db.setProfilingLevel(级别)命令来实时配置，其信息保存在 生成的system.profile 中。默认情况下，mongod的禁用分析。数据库分析可以影响数据库的性能，因为分析器必须记录和处理所有的数据库操作。所以在需要的时候用动态修改就可以了。
 profile = 2
		
 #slowms：记录profile分析的慢查询的时间，默认是100毫秒。具体同上。
 slowms  = 200
		
 #quota：配额，默认false。是否开启配置每个数据库的最多文件数的限制。当为true则用quotaFiles来配置最多文件的数量。
 quota = true
 #quotaFiles：配额数量。每个数据库的数据文件数量的限制。此选项需要quota为true。默认为8。
 quotaFiles = 8
		
 #rest： 默认false，设置为true，使一个简单的 REST API。设置为true，开启后，在MongoDB默认会开启一个HTTP协议的端口提供REST的服务（nohttpinterface=false），这个端口是你Server端口加上1000，即28017，默认的HTTP端口是数据库状态页面，（开启后，web页面的Commands行中的命令都可以点进去）。mongodb自带的REST，不支持增、删、改，同时也不支持 权限认证。
 rest = true
		
 #repair：修复数据库操作，默认是false。设置为true时，启动后修复所有数据库，设置这个选项最好在命令行上，而不是在配置文件或控制脚本。启动时修复，需要关闭journal.并且启动时,用控制文件指定参数和配置文件里指定参数的方式进行修复之后，（修复信息见log），需要再禁用repair参数才能启用mongodb。注意：mongod修复时，需要重写所有的数据库文件。如果在同一个帐号下不能运行修复，则需要运行chown修改数据库文件的权限。
 repair = true
		
 #repairpath：修复路径，默认是在dbpath路径下的_tmp 目录。
 repairpath = _tmp
		
 #smallfiles：是否使用较小的默认文件。默认为false，不使用。设置为true，使用较小的默认数据文件大小。smallfiles减少数据文件的初始大小，并限制他们到512M，也减少了日志文件的大小，并限制他们到128M。如果数据库很大，各持有少量的数据，会导致mongodb创建很多文件，会影响性能。
 smallfiles = true
		
 #syncdelay：刷写数据到日志的频率，通过fsync操作数据。默认60秒。默认就可以，不需要设置。不会对日志文件（journal files）有影响。警告：如果设置为0，SYNCDELAY 不会同步到磁盘的内存映射文件。在生产系统上，不要设置这个值。
 syncdelay = 60
	
 #sysinfo：系统信息，默认false。设置为true，mongod会诊断系统有关的页面大小，数量的物理页面，可用物理??页面的数量输出到标准输出。当开启sysinfo参数的时候，只会打印上面的信息，不会启动mongodb的程序。所以要关闭该参数，才能开启mongodb。
 sysinfo = false
		
 #upgrade:升级。默认为false。当设置为true，指定DBPATH，升级磁盘上的数据格式的文件到最新版本。会影响数据库操作，更新元数据。大部分情况下，不需要设置该值。
 upgrade = false
		
 #traceExceptions：是否使用内部诊断。默认false。
 traceExceptions = false
		
 #quiet：安静模式。
 quiet = true
	
     #setParameter：2.4的新参数，指定启动选项配置。想设置多个选项则用一个setParameter选项指定.格式：setParameter = &amp;lt;parameter&amp;gt;=&amp;lt;value&amp;gt;,如配置文件里设置syncdelay：
     setParameter = syncdelay= 55,notablescan = true,journalCommitInterval = 50,traceExceptions = true

&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;后台启动mongodb&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mongod -f /etc/mongod.conf
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;关闭mongdodb&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mongod --shutdown -f /etc/mongod.conf
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;&amp;lt;font color=red&amp;gt;&lt;em&gt;注意！后台启动的mongdodb不要去暴力杀进程，不然你会发现各种各样奇怪的情况，我之前就遇到过无论如何都无法启动的情况，最后只能把/data/db 下所有文件全部删除，才恢复正常，切记切记！！！！！！&lt;/em&gt;&amp;lt;/font&amp;gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/mongodb%E5%9C%A8linux-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/mongodb%E5%9C%A8linux-%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
        
        <category>服务器部署</category>
        
        
      </item>
    
      <item>
        <title>linux上安装nodejs+npm环境</title>
        <description>&lt;h1 id=&quot;安装nodejsnpm环境&quot;&gt;安装nodejs+npm环境&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;添加一个nodejs用户（或切换至运维用户，注意需要非root权限）&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;adduser nodejs //这一步看具体情况，是否需要！！
passwd nodejs  //这一步看具体情况，是否需要！！
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;下载以及安装 &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;node.js&lt;/a&gt;
如果下载source版本，需要通过configure/make/make install进行安装，不过可能会由于依赖包问题需要升级c++
建议直接下载二进制文件包，解压可以直接使用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;这里我们先把下载的node-vx.x.x-linux-x64.tar.xz 包放在linux 用户根目录的Downloads目录下。&lt;/p&gt;

    &lt;blockquote&gt;
      &lt;p&gt;ps: mac本地下载tar包上传linux服务器的命令&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;blockquote&gt;
      &lt;p&gt;语法：scp /Users/tangsicheng/Downloads/node-xxxx-linux-x64.tar.xz  &lt;服务器用户名&gt;@&lt;服务器地址&gt;:&lt;安装目录绝对路径&gt;&lt;/安装目录绝对路径&gt;&lt;/服务器地址&gt;&lt;/服务器用户名&gt;&lt;/p&gt;
    &lt;/blockquote&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  scp /Users/tangsicheng/Downloads/node-xxxx-linux-x64.tar.xz  tsc@10.1.1.1:/home/tsc/Downloads
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;然后依次执行下列命令解压&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  su - nodejs //切换账号，看情况执行！
  cd ~/Downloads/
  xz -d node-xxxx-linux-x64.tar.xz
  tar -xvf node-xxxx-linux-x64.tar
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;之后我选择把解压后的文件重新命名为nodejs，并且放到用户根目录下，这里可以自由选择到底放在哪个目录下。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  mv node-v8.9.3-linux-x64 /home/&amp;lt;userName&amp;gt;/nodejs
  cd ~
  ls
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;p&gt;现在应该就可以在用户根目录下看到nodejs的文件夹了。然后我们开始做软连接。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  sudo ln -s /home/&amp;lt;userName&amp;gt;/nodejs/bin/node /usr/local/bin/node
  sudo ln -s /home/&amp;lt;userName&amp;gt;/nodejs/bin/npm /usr/local/bin/npm
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;验证是否已经成功安装node，如果出现下面的情况就OK了&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  node -v
  v6.11.0
  npm -v
  3.10.10
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;安装npm的中国淘宝镜像&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  npm get registry //获取目前的镜像地址

  npm config set registry http://registry.npm.taobao.org/  //设置淘宝镜像

  npm config set registry https://registry.npmjs.org/   //还原成最新的镜像

&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/linux%E4%B8%8A%E5%AE%89%E8%A3%85nodejs+npm/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/linux%E4%B8%8A%E5%AE%89%E8%A3%85nodejs+npm/</guid>
        
        <category>服务器部署</category>
        
        
      </item>
    
      <item>
        <title>IOS 类扩展获取对应类私有属性问题</title>
        <description>&lt;h1 id=&quot;ios-类扩展获取对应类私有属性问题&quot;&gt;IOS 类扩展获取对应类私有属性问题&lt;/h1&gt;

&lt;h3 id=&quot;描述&quot;&gt;描述：&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;当我们用category对某个类进行方法扩展的时候，我们会碰到需要获取这个类内部的私有属性的值的问题。而如果这个类并没有暴露出getter方法，那么我们无论是用_xxx还是self.xxx 都没办法获取到这个属性的值。这个时候，就可以用kvc去获取。&lt;/li&gt;
  &lt;li&gt;例如，主类：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#import &quot;Person.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;扩展类：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#import &quot;Person.h&quot;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;getproperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#import &quot;Person+getproperty.h&quot;
#import &amp;lt;objc/runtime.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;getproperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strAddrKey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sc&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//获取数据
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;valueForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 重新赋值
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;new data&quot;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;ps: 注意，这里如果需要调用私有方法的，需要重载或者method swizzle ，不然只能调用.h文件内暴露出来的方法。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/ios%E7%B1%BB%E6%89%A9%E5%B1%95%E8%8E%B7%E5%8F%96%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/ios%E7%B1%BB%E6%89%A9%E5%B1%95%E8%8E%B7%E5%8F%96%E5%B1%9E%E6%80%A7%E9%97%AE%E9%A2%98/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>ios消息推送证书申请流程</title>
        <description>&lt;h1 id=&quot;ios消息推送证书申请流程&quot;&gt;iOS消息推送证书申请流程：&lt;/h1&gt;
&lt;p&gt;参考http://docs.getui.com/getui/mobile/ios/apns/&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;1.访问&lt;a href=&quot;https://developer.apple.com&quot;&gt;ios开发者&lt;/a&gt;点击右上角Account选择进入帐号首页，选择Certificates, Identifiers &amp;amp; Profiles&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;2.在 Certificates, Identifiers &amp;amp; Profiles 中，点击 App IDs 进入 App ID 列表。&lt;/li&gt;
  &lt;li&gt;3.选择你的应用或者点击+号创建一个App Id&lt;/li&gt;
  &lt;li&gt;4.点击edit 开启Push Notification功能。&lt;/li&gt;
  &lt;li&gt;5.点击create certificate，这个时候会进入certificates 中all 的add ios certificate&lt;/li&gt;
  &lt;li&gt;6.在About Creating a Certificate Signing Request (CSR)点击 continue&lt;/li&gt;
  &lt;li&gt;7.这个时候会进入Generate your certificate.需要你上传upload csr file&lt;/li&gt;
  &lt;li&gt;8.生成csrfile:打开本地的钥匙串访问–》证书助手–》从证书颁发者机构申请证书–》选择存储到磁盘–》填写用户电子邮件地址—&amp;gt;保存，这个时候会生成一张CertificateSigningRequest.certSigningRequest证书。&lt;/li&gt;
  &lt;li&gt;9.将上述证书传给第7步，点击continue，生成APNs Push Certificate。&lt;/li&gt;
  &lt;li&gt;10.这个时候去https://developer.apple.com/account/ios/certificate 找到你刚刚生成type为APNs Development IOS 的certification （name是你应用的bundleId），下载它。&lt;/li&gt;
  &lt;li&gt;11.双击安装，钥匙串访问中你的证书会显示在我的证书中，（注意选择我的证书和 登录选项）。&lt;/li&gt;
  &lt;li&gt;12.导出.p12文件就可以了。&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/ios%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/ios%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81%E8%AF%81%E4%B9%A6%E7%94%9F%E6%88%90/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Mac SVN管理软件Conerstone破解版安装后提示“已损坏”问题</title>
        <description>&lt;p&gt;#Mac SVN管理软件Conerstone破解版安装后提示“已损坏”问题&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;参考：http://blog.csdn.net/wsyx768/article/details/52756782&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;##导致问题原因
软件有经过了汉化或者破解，所以可能被Mac认为「已损坏」&lt;/p&gt;

&lt;p&gt;##解决问题办法&lt;/p&gt;

&lt;p&gt;系统偏好设置 -&amp;gt; 安全性与隐私 -&amp;gt; 通用 -&amp;gt; 选择“任何来源”&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如果通用里面没有‘任何来源’这个选项，需要在终端输入：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo spctl --master-disable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;如果需要隐藏‘任何来源’选项,在终端输入。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo spctl --master-enable
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;这样，你应该就可以通过网上下载的破解版，来使用svn了.&lt;/li&gt;
  &lt;li&gt;mac 其实是自带终端的，也可以直接在终端里操作svn。&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 11 Mar 2018 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2018/03/cornerstone-%E7%A0%B4%E8%A7%A3%E7%89%88%E6%8A%A5%E9%94%99%E6%8D%9F%E5%9D%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/03/cornerstone-%E7%A0%B4%E8%A7%A3%E7%89%88%E6%8A%A5%E9%94%99%E6%8D%9F%E5%9D%8F/</guid>
        
        <category>工具</category>
        
        
      </item>
    
  </channel>
</rss>
